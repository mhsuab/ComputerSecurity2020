import gmpy2
from Crypto.Util.number import long_to_bytes, inverse

n = 22001778874542774315484392481115711539281104740723517828461360611903057304469869336789715900703500619163822273767393143914615001907123143200486464636351989898613180095341102875678204218769723325121832871221496816486100959384589443689594053640486953989205859492780929786509801664036223045197702752965199575588498118481259145703054094713019549136875163271600746675338534685099132138833920166786918380439074398183268612427028138632848870032333985485970488955991639327
c = 1067382668222320523824132555613324239857438151855225316282176402453660987952614935478188752664288189856467574123997124118639803436040589761488611318906877644244524931837804614243835412551576647161461088877884786181205274671088951504353502973964810690277238868854693198170257109413583371510824777614377906808757366142801309478368968340750993831416162099183649651151826983793949933939474873893278527484810417812120138131555544749220438456366110721231219155629863865
e = 65537

endStr = '\b' * len(str(n))

def get_factor(n, f, num):
    _n6 = int(gmpy2.iroot(n//f, num)[0])
    i = 1 if (_n6 % 2 == 0) else 2
    while True:
        print (i, end='\r')
        if ((n % (_n6 + i)) == 0):
            return _n6 + i
        if ((n % (_n6 - i)) == 0):
            return _n6 - i
        i += 2

def unpad(data):
    return data[data.find(b'\x00', 0) + 1:].decode()

p = get_factor(n, 12, 3)
assert(gmpy2.is_prime(p))
_n = n // p
q1 = get_factor(_n, 3, 2)
q2 = _n // q1
assert(gmpy2.is_prime(q1))
assert(gmpy2.is_prime(q2))

d = inverse(e, (p - 1) * (q1 - 1) * (q2 - 1))
m = pow(c, d, n)
print (unpad(long_to_bytes(m)))